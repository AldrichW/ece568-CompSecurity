# Aldrich Wingsiong, 998735775, aldrich.wingsiong@mail.utoronto.ca
# Anthony Kwan, 998930536, anthony.kwan@mail.utoronto.ca

Overview:

This lab is a simple demonstration of two factor authentication. Two programs are built:
    1) generateQRcode - generates a QR code given an account name, issuer, and a secret key
    2) validateQRcode - validates that a given HOTP and TOTP string is correct based on the secret key provided.


Building the program:

    1) Run ‘make’ within the same directory of this README

Generating a QR Code:

    After building the two programs. Execute the following shell command:

        ./generateQRcode [issuer] [accountName] [secretHex]

    ** Note that the secret hex must be 20 characters or less. An assert will be thrown otherwise. **

Validating HOTP and TOTP codes:

        ./validateQRcode [secretHex] [HOTP] [TOTP]

    ** The HOTP and TOTP strings can be generated by third-party mobile apps such as Google Authenticator **

Implementation Details:

generateQRcode

    1)   This program takes an issuer, an account name, and a secret hex as input.
    2)   The issuer and account name are encoded using the method urlEncode();
    3)   The secret hex must be converted into a base32 encoded string. This is done by taking the hex string and converting it into a byte array with a size of 10 bytes. If the secret hex is less than 20 characters, a new string buffer is created with 20 characters and the extra space is padded with leading zeros. The byte array is then populated by traversing the secret hex and converting every two hex digits into an integer value. This value is then pushed as an element in the byte array.
    4)  A uri is then generated for hotp and totp using the following format string:
        
        sprintf(hotp_uri, "otpauth://hotp/%s?issuer=%s&secret=%s&counter=1", encoded_account_name, encoded_issuer, b32_encoded_secret);

    5)  Lastly, the uri is passed into the method displayQRcode(char *uri)

validateQRcode

    For validating the HOTP string:
        1)  Convert the HOTP string to a byte array, similar to generating the QR code.
        2)  Create an inner byte buffer that stores the result of the HOTP string XOR’d with the IPAD (0x36)
        3)  Create an outer byte buffer that stores the result of the HOTP string XOR’d with the OPAD (0x5c)
        4)  Initialize a SHA1 object using an initialized SHA1 context 
        5)  Concatenate the inner byte buffer with the  count of 1. Hash the result by calling sha1_final()
        6)  Concatenate the outer byte buffer with the hashed result from step 5. Hash the result by calling sha1_final.
        7)  Truncate the result to 6 digits. 
        8)  If the result from 7) matches the HOTP string passed in, return 1 (valid). Else, return 0 (invalid)

    For validating the TOTP string:

        1)  Use the same process for validating HOTP string, except use the number of time steps.
        2)  The current time steps T is calculated by getting the current time and dividing it by the period of 30 seconds. Truncate the decimals by calling the floor function.
        3)  The result from step 2) is turned into binary through bitwise shifting by multiples of 8 and masking the result using 0xff. The results are pushed into an 8-byte array. This is used as the counter for generating an HMAC value.




